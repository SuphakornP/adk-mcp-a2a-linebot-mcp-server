#!/usr/bin/env python3
"""
‡∏™‡∏£‡πâ‡∏≤‡∏á Pinecone Index with Integrated Embedding
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô RAG ‡∏ú‡πà‡∏≤‡∏ô MCP Tools
‡πÉ‡∏ä‡πâ Pinecone hosted embedding model (multilingual-e5-large)
"""

import os
from pinecone import Pinecone, ServerlessSpec
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configuration
INDEX_NAME = "test-rag-integrated"
EMBEDDING_MODEL = "multilingual-e5-large"  # Pinecone hosted model
DIMENSION = 1024  # multilingual-e5-large dimension (auto-configured)
METRIC = "cosine"  # For display only; actual metric is determined by the model
CLOUD = "aws"
REGION = "us-west-2"
FIELD_MAP = {"text": "content"}  # field ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å embed ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

def create_index_with_integrated_embedding():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Pinecone index ‡πÅ‡∏ö‡∏ö serverless ‡∏û‡∏£‡πâ‡∏≠‡∏° TRUE integrated embedding
    ‡πÉ‡∏ä‡πâ Pinecone hosted model: multilingual-e5-large
    
    ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ:
    - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á embedding ‡πÄ‡∏≠‡∏á
    - ‡πÉ‡∏ä‡πâ MCP search-records ‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ text ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
    - Consistent embedding (‡πÉ‡∏ä‡πâ model ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î)
    - ‡∏•‡∏î latency ‡πÅ‡∏•‡∏∞ complexity
    """
    
    # Initialize Pinecone
    api_key = os.getenv("PINECONE_API_KEY")
    if not api_key:
        raise ValueError("‚ùå PINECONE_API_KEY not found in environment variables")
    
    pc = Pinecone(api_key=api_key)
    
    print(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö index ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà...")
    existing_indexes = pc.list_indexes()
    
    # Check if index already exists
    index_names = [idx.name for idx in existing_indexes.indexes]
    if INDEX_NAME in index_names:
        print(f"‚ö†Ô∏è  Index '{INDEX_NAME}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        response = input("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): ")
        if response.lower() == 'y':
            print(f"üóëÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö index '{INDEX_NAME}'...")
            pc.delete_index(INDEX_NAME)
            print("‚úÖ ‡∏•‡∏ö index ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            import time
            print("‚è≥ ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            time.sleep(10)
        else:
            print("‚ÑπÔ∏è  ‡πÉ‡∏ä‡πâ index ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≠‡πÑ‡∏õ")
            return
    
    print(f"\nüìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á index with INTEGRATED EMBEDDING: {INDEX_NAME}")
    print(f"   - Embedding Model: {EMBEDDING_MODEL}")
    print(f"   - Dimension: {DIMENSION}")
    print(f"   - Metric: {METRIC}")
    print(f"   - Cloud: {CLOUD}")
    print(f"   - Region: {REGION}")
    print(f"   - Type: Serverless with Integrated Inference")
    print(f"   - Field Map: {FIELD_MAP}")
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á serverless index ‡∏û‡∏£‡πâ‡∏≠‡∏° integrated embedding
        # ‡πÉ‡∏ä‡πâ create_index_for_model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö integrated inference
        # Note: metric ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏î‡∏¢ model ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏)
        
        index_config = pc.create_index_for_model(
            name=INDEX_NAME,
            cloud="aws",
            region="us-west-2",
            embed={
                "model": "multilingual-e5-large",
                "field_map": FIELD_MAP
            }
        )
        
        print(f"\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á index '{INDEX_NAME}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        print(f"\nüéâ ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á Integrated Embedding:")
        print(f"   ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á embedding ‡πÄ‡∏≠‡∏á")
        print(f"   ‚úÖ ‡πÉ‡∏ä‡πâ MCP search-records ‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")
        print(f"   ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ text ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á vector)")
        print(f"   ‚úÖ Consistent ‡πÅ‡∏•‡∏∞ Maintainable")
        print(f"   ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡∏î‡∏µ (multilingual-e5-large)")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• index
        print(f"\nüîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Index:")
        index_info = pc.describe_index(INDEX_NAME)
        print(f"   - Name: {index_info.name}")
        print(f"   - Dimension: {index_info.dimension}")
        print(f"   - Metric: {index_info.metric}")
        print(f"   - Host: {index_info.host}")
        print(f"   - Status: {index_info.status.state}")
        
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        raise

def main():
    """Main function"""
    print("=" * 80)
    print("üöÄ Pinecone Index Creator with Integrated Embedding Support")
    print("=" * 80)
    print()
    
    try:
        create_index_with_integrated_embedding()
        print("\n" + "=" * 80)
        print("‚úÖ Process completed successfully!")
        print("=" * 80)
        print("\nüìñ Next steps:")
        print("   1. ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sample ‡πÉ‡∏ô sample_data/")
        print("   2. ‡∏£‡∏±‡∏ô: python ingest_data.py")
        print("   3. ‡∏£‡∏±‡∏ô: python agent.py")
        
    except Exception as e:
        print("\n" + "=" * 80)
        print(f"‚ùå Process failed: {str(e)}")
        print("=" * 80)

if __name__ == "__main__":
    main()
